import java.util.*;

public class Carter{
	public static void main(String [] args){
		Carter c=new Carter();
	}
  public Carter(){
    TreeNode n=new TreeNode(1);
    n.left=new TreeNode(2);
    n.right=new TreeNode(3);
    n.left.left=new TreeNode(4);
    n.left.right=new TreeNode(5);
    n.right.left=new TreeNode(6);
    n.right.right=new TreeNode(7);
    n.right.left.left = new TreeNode(8);
    n.right.left.right = new TreeNode(9);
    n.right.right.right = new TreeNode(10);
     List<List<Integer>> sol=sol(n);
  }
  public static List<List<Integer>> sol(TreeNode root){
    List<List<Integer>> sol=new ArrayList();
    Stack<TreeNode> st2=new Stack<TreeNode>();
    Stack<TreeNode> st=new Stack<TreeNode>();
    int rol=1;
    st.add(root);
    while(!(st2.isEmpty()&&st.isEmpty())){
      sol.add(new ArrayList<Integer>());
      if((rol&1)==0){
        while(!st2.isEmpty()){
          TreeNode n=st2.pop();
          System.out.print(n.val+"->");
          sol.get(rol-1).add((int)n.val);
           if(n.right!=null){
            st.add(n.right);
          }
          if(n.left!=null){
            st.add(n.left);
          }
        }
      }else{
        while(!st.isEmpty()){
          TreeNode n=st.pop();
          System.out.print(n.val+"->");
          sol.get(rol-1).add((int)n.val);
          if(n.left!=null){
            st2.add(n.left);
          }
           if(n.right!=null){
            st2.add(n.right);
          }
        }
      }
      rol++;
    }
    return sol;
  }
  class Node<T>{
  public T val;
  public Node<T> next;

  public Node(){

  }

  public Node(T val){
    this.val = val;
  }
}
  class TreeNode<T> extends Node<T>{
  public TreeNode<T> left;
  public TreeNode<T> right;

  public TreeNode(T val){
    super(val);
  }

}
}
/*
  given the root node of a binary tree, return the zigzag level order traversal of the tree

  for example, the tree looks like this:
                1
          2         3
       4    5     6   7
                8   9    10   

    the answer is: [[1], [3, 2], [4,5, 6, 7], [10, 9, 8]]

    Note: import the TreeNode class from UsefulClasses

    this is the solution method: 

    
*/



import java.util.*;
public class Michael{

  public Michael(){
    System.out.println("Michael running");
    Node<Integer> t1= new Node(2);
    Node<Integer> t2 = new Node(9);
    Node<Integer> t3 = new Node(9);
    t1.next = t2;
    t2.next = t3;

    Node<Integer> k1 = new Node(9);
    Node<Integer> k2 = new Node(6);
    Node<Integer> k3 = new Node(4);
    k1.next = k2;
    k2.next= k3;

    Node result = addTwoNumbers(t1, k1);

    while(result != null){
      System.out.print(result.val+"->");
      result = result.next;
    }
    System.out.println();
  }

	public static void main(String [] args){
    Michael m = new Michael();
		
	}

  public  Node<Integer> addTwoNumbers(Node<Integer> l1, Node<Integer> l2){

      if(l1 == null && l2 == null) return null;
      if(l1 == null || l2 == null) return l1 == null ? l1 : l2;

    int carry = 0;

    Node<Integer> newHead = null;
    Node<Integer> prev = newHead;

    while(l1 != null && l2 != null){
      int newVal = (carry + l1.val + l2.val) % 10;
      carry = (carry + l1.val + l2.val) >= 10? 1 : 0;
      if(prev == null){
        newHead = new Node(newVal);
        prev = newHead;
      }else{
        Node curr = new Node(newVal);
        prev.next = curr;
        prev = curr;
      }
      l1 = l1.next;
      l2 = l2.next;
    }

    while(l1 != null){
      int newVal = (carry + l1.val ) % 10;
      carry = (carry + l1.val) >= 10? 1 : 0;
      Node<Integer> curr = new Node(newVal);
      prev.next = curr;
      prev = curr;
      l1 = l1.next;
    }
    while(l2 != null){
      int newVal = (carry + l2.val ) % 10;
      carry = (carry + l2.val ) >= 10? 1 : 0;
      Node<Integer> curr = new Node(newVal);
      prev.next = curr;
      prev = curr;
      l2 = l2.next;
    }

    if(carry != 0){
      prev.next = new Node(carry);
    }
    return newHead;

  }


  class Node<T>{
    public T val;
    public Node<T> next;

    public Node(){

    }

    public Node(T val){
      this.val = val;
    }
  }
}
/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

  }

*/




public class Vincent{
	public static void main(String [] args){
		System.out.println("Vincent running");
    int[] arr1=new int [0];
    int[] arr2=new int [0];

    int[] jor=sol(arr1,arr2);
    
    
    // Carter's test case   
    boolean passed = true;
    if(jor.length != arr1.length + arr2.length){
      passed = false;
    }else{
      int prev = Integer.MIN_VALUE;
      for(int i : jor){
        if ( i < prev) {
          passed = false;
          break;
        }
        prev = i;
      }
    }
   System.out.println(passed? "Passed": "Failed");

	}

/*
  merge two sorted array
  given two array, merge sort the two array
  Given: int[] arr1, int[]arr2
  runtime:O(len(arr1) + len(arr2))
*/
  public static int[] sol(int[] arr1, int[] arr2){
    int numInArr1=0;
    int numInArr2=0;

    int[] jojo= new int[arr1.length+arr2.length];

    for(int i=0;i<arr1.length+arr2.length;i++){
     if(numInArr1==arr1.length){
        jojo[numInArr2+numInArr1]=(arr2[numInArr2]);
        numInArr2++;
      }
      else if(numInArr2==arr2.length){
        jojo[numInArr2+numInArr1]=(arr1[numInArr1]);
        numInArr1++;
      }
      else if(arr1[numInArr1]<=arr2[numInArr2]){
        jojo[numInArr2+numInArr1]=(arr1[numInArr1]);
        numInArr1++;
      }
      else if(arr1[numInArr1]>arr2[numInArr2]){
        jojo[numInArr2+numInArr1]=(arr2[numInArr2]);
        numInArr2++;
      }
    }
    return jojo;

  }
}


